syntax = "proto3";
package v1;

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
	info: {
		title: "Book service";
		version: "1.0";
		contact: {
			name: "redeam-rest";
			url: "https://github.com/radean0909/redeam-rest";
			email: "radean0909@gmail.com";
        };
    };
    schemes: HTTP;
    consumes: "application/json";
    produces: "application/json";
    responses: {
		key: "404";
		value: {
			description: "Returned when the resource does not exist.";
			schema: {
				json_schema: {
					type: STRING;
				}
			}
		}
	}
};

// Books the library has
message Book {
    int64 id = 1;
    string title = 2; 
    string author = 3; // Production would likely link to another table
    string publisher = 4; // Production would likely link to another table
    google.protobuf.Timestamp publish_date = 5; 
    double rating = 6; // Double to allow for  "half" star ratings or other values as a result of aggregations

    enum Status {
        UNKNOWN = 0; // Required due to proto3 standards
        CHECKED_IN = 1;
        CHECKED_OUT = 2;
    }
    Status status = 7;
}

message CreateRequest{
    string api = 1; // Explicitly stating version for best-practice
    Book book = 2;
}
message CreateResponse{
    string api = 1; 
    int64 id = 2; 
}
message ReadRequest{
    string api = 1; 
    int64 id = 2;
}
message ReadResponse{
    string api = 1; 
    Book book = 2; 
}
message UpdateRequest{
    string api = 1; 
    Book book = 2;
}
message UpdateResponse{
    string api = 1; 
    int64 updated = 2; // Contains number of entries that have been updated, should be 1 if update is successful
}
message DeleteRequest{
    string api = 1; 
    int64 id = 2;
}
message DeleteResponse{
    string api = 1; 
    int64 deleted = 2; // Contains number of entries that have been deleted, should be 1 if delete is successful
}
message ReadAllRequest{
    string api = 1; 
}
message ReadAllResponse{
    string api = 1; 
    repeated Book books = 2; // List of all the books
}

service BookService {
    rpc ReadAll(ReadAllRequest) returns (ReadAllResponse){
        option (google.api.http) = {
            get: "/v1/book/all"
        };
    }

    rpc Create(CreateRequest) returns (CreateResponse){
        option (google.api.http) = {
            post: "/v1/book"
            body: "*"
        };
    }

    rpc Read(ReadRequest) returns (ReadResponse){
        option (google.api.http) = {
            get: "/v1/book/{id}"
        };
    }

    rpc Update(UpdateRequest) returns (UpdateResponse){
        option (google.api.http) = {
            put: "/v1/book/{book.id}"
            body: "*"

            additional_bindings {
                patch: "/v1/book/{book.id}"
                body: "*"
            }
        };
    }

    rpc Delete(DeleteRequest) returns (DeleteResponse){
        option (google.api.http) = {
            delete: "/v1/book/{id}"
        };
    }
}